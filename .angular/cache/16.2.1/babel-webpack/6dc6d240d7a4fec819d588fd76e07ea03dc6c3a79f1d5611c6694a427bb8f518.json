{"ast":null,"code":"var _class;\nimport { EventEmitter } from '@angular/core';\nimport { Subject, debounceTime } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class SearchBoxComponent {\n  constructor() {\n    this.dbouncer = new Subject();\n    this.placeholder = '';\n    this.onValue = new EventEmitter();\n    this.onDebounce = new EventEmitter();\n    this.initialValue = new EventEmitter();\n  }\n  ngOnInit() {\n    this.debouncerSubscription = this.dbouncer.pipe(debounceTime(300)).subscribe(value => {\n      this.onDebounce.emit(value);\n    });\n  }\n  ngOnDestroy() {\n    this.debouncerSubscription?.unsubscribe();\n  }\n  emitValue(value) {\n    this.onValue.emit(value);\n    this.initialValue.emit(value);\n  }\n  onKeyPress(searchTerm) {\n    this.dbouncer.next(searchTerm);\n  }\n}\n_class = SearchBoxComponent;\n_class.ɵfac = function SearchBoxComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"shared-search-box\"]],\n  inputs: {\n    placeholder: \"placeholder\"\n  },\n  outputs: {\n    onValue: \"onValue\",\n    onDebounce: \"onDebounce\",\n    initialValue: \"initialValue\"\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[\"type\", \"text\", 1, \"form-control\", 3, \"placeholder\", \"value\", \"keyup\"], [\"txtInput\", \"\"]],\n  template: function SearchBoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"input\", 0, 1);\n      i0.ɵɵlistener(\"keyup\", function SearchBoxComponent_Template_input_keyup_0_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(1);\n        return i0.ɵɵresetView(ctx.onKeyPress(_r0.value));\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"placeholder\", ctx.placeholder)(\"value\", ctx.initialValue);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"names":["EventEmitter","Subject","debounceTime","SearchBoxComponent","constructor","dbouncer","placeholder","onValue","onDebounce","initialValue","ngOnInit","debouncerSubscription","pipe","subscribe","value","emit","ngOnDestroy","unsubscribe","emitValue","onKeyPress","searchTerm","next","selectors","inputs","outputs","decls","vars","consts","template","SearchBoxComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵlistener","SearchBoxComponent_Template_input_keyup_0_listener","ɵɵrestoreView","_r1","_r0","ɵɵreference","ɵɵresetView","ɵɵelementEnd","ɵɵproperty"],"sources":["/media/rubenlinoman/DATOS/Formacion_angular/Angular/04-countryApp/src/app/shared/components/search-box/search-box.component.ts","/media/rubenlinoman/DATOS/Formacion_angular/Angular/04-countryApp/src/app/shared/components/search-box/search-box.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\nimport { Subject, Subscription, debounceTime } from 'rxjs';\n\n@Component({\n  selector: 'shared-search-box',\n  templateUrl: './search-box.component.html',\n  styles: [\n  ]\n})\nexport class SearchBoxComponent implements OnInit, OnDestroy {\n\n  private dbouncer: Subject<string> = new Subject<string>();\n  private debouncerSubscription?: Subscription;\n\n  @Input()\n  public placeholder: string = '';\n\n  @Output()\n  public onValue = new EventEmitter<string>();\n\n  @Output()\n  public onDebounce = new EventEmitter<string>();\n\n  @Output()\n  public initialValue = new EventEmitter<string>();\n\n  ngOnInit(): void {\n    \n   this.debouncerSubscription = this.dbouncer\n    .pipe(\n      debounceTime(300)\n    )\n    .subscribe(value => {\n      this.onDebounce.emit(value);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.debouncerSubscription?.unsubscribe();\n  }\n\n  emitValue(value: string):void {\n    this.onValue.emit(value);\n    this.initialValue.emit(value);\n  }\n\n  onKeyPress(searchTerm: string) {\n    this.dbouncer.next(searchTerm);\n  }\n}\n","  <!-- (keyup.enter)=\"emitValue(txtInput.value)\" -->\n<input \n  type=\"text\" \n  class=\"form-control\"\n  (keyup)=\"onKeyPress(txtInput.value)\"\n  [placeholder]=\"placeholder\"\n  [value]=\"initialValue\"\n  #txtInput\n>"],"mappings":";AAAA,SAAoBA,YAAY,QAA0C,eAAe;AACzF,SAASC,OAAO,EAAgBC,YAAY,QAAQ,MAAM;;AAQ1D,OAAM,MAAOC,kBAAkB;EAN/BC,YAAA;IAQU,KAAAC,QAAQ,GAAoB,IAAIJ,OAAO,EAAU;IAIlD,KAAAK,WAAW,GAAW,EAAE;IAGxB,KAAAC,OAAO,GAAG,IAAIP,YAAY,EAAU;IAGpC,KAAAQ,UAAU,GAAG,IAAIR,YAAY,EAAU;IAGvC,KAAAS,YAAY,GAAG,IAAIT,YAAY,EAAU;;EAEhDU,QAAQA,CAAA;IAEP,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACN,QAAQ,CACxCO,IAAI,CACHV,YAAY,CAAC,GAAG,CAAC,CAClB,CACAW,SAAS,CAACC,KAAK,IAAG;MACjB,IAAI,CAACN,UAAU,CAACO,IAAI,CAACD,KAAK,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAE,WAAWA,CAAA;IACT,IAAI,CAACL,qBAAqB,EAAEM,WAAW,EAAE;EAC3C;EAEAC,SAASA,CAACJ,KAAa;IACrB,IAAI,CAACP,OAAO,CAACQ,IAAI,CAACD,KAAK,CAAC;IACxB,IAAI,CAACL,YAAY,CAACM,IAAI,CAACD,KAAK,CAAC;EAC/B;EAEAK,UAAUA,CAACC,UAAkB;IAC3B,IAAI,CAACf,QAAQ,CAACgB,IAAI,CAACD,UAAU,CAAC;EAChC;;SAvCWjB,kBAAkB;;mBAAlBA,MAAkB;AAAA;;QAAlBA,MAAkB;EAAAmB,SAAA;EAAAC,MAAA;IAAAjB,WAAA;EAAA;EAAAkB,OAAA;IAAAjB,OAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;EAAAgB,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;MCR/BE,EAAA,CAAAC,cAAA,kBAOC;MAJCD,EAAA,CAAAE,UAAA,mBAAAC,mDAAA;QAAAH,EAAA,CAAAI,aAAA,CAAAC,GAAA;QAAA,MAAAC,GAAA,GAAAN,EAAA,CAAAO,WAAA;QAAA,OAASP,EAAA,CAAAQ,WAAA,CAAAT,GAAA,CAAAZ,UAAA,CAAAmB,GAAA,CAAAxB,KAAA,CAA0B;MAAA,EAAC;MAHtCkB,EAAA,CAAAS,YAAA,EAOC;;;MAHCT,EAAA,CAAAU,UAAA,gBAAAX,GAAA,CAAAzB,WAAA,CAA2B,UAAAyB,GAAA,CAAAtB,YAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
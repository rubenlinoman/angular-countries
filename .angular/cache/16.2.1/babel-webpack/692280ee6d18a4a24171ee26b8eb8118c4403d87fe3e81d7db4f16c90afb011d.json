{"ast":null,"code":"var _class;\nimport { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CountriesService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://restcountries.com/v3.1';\n    this.cacheStore = {\n      byCapital: {\n        term: '',\n        countries: []\n      },\n      byCountries: {\n        term: '',\n        countries: []\n      },\n      byRegion: {\n        region: '',\n        countries: []\n      }\n    };\n  }\n  getCountriesRequest(url) {\n    return this.http.get(url).pipe(catchError(error => of([])));\n  }\n  searchCountryByAlphaCode(code) {\n    const url = `${this.apiUrl}/alpha/${code}`;\n    return this.http.get(url).pipe(map(countries => countries.length > 0 ? countries[0] : null), catchError(error => of(null)) // Devolver un arreglo vacío para seguir con el programa en caso de error\n    );\n  }\n\n  searchCapital(term) {\n    const url = `${this.apiUrl}/capital/${term}`;\n    return this.getCountriesRequest(url);\n  }\n  searchCountry(term) {\n    const url = `${this.apiUrl}/name/${term}`;\n    return this.getCountriesRequest(url);\n  }\n  searchRegion(region) {\n    const url = `${this.apiUrl}/region/${region}`;\n    return this.getCountriesRequest(url);\n  }\n}\n_class = CountriesService;\n_class.ɵfac = function CountriesService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","of","CountriesService","constructor","http","apiUrl","cacheStore","byCapital","term","countries","byCountries","byRegion","region","getCountriesRequest","url","get","pipe","error","searchCountryByAlphaCode","code","length","searchCapital","searchCountry","searchRegion","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/media/rubenlinoman/DATOS/Formacion_angular/Angular/04-countryApp/src/app/countries/services/countries.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, delay, map, of } from 'rxjs';\n\n\nimport { Country } from '../interfaces/country';\nimport { CacheStore } from '../interfaces/cache-store.interfaces';\n\n@Injectable({providedIn: 'root'})\nexport class CountriesService {\n\n  private apiUrl: string = 'https://restcountries.com/v3.1';\n  \n  public cacheStore: CacheStore = {\n    byCapital: {term: '', countries: []},\n    byCountries: {term: '', countries: []},\n    byRegion: {region: '', countries: []}\n  }\n\n  constructor(private http: HttpClient) { }\n\n  private getCountriesRequest(url: string): Observable<Country[]> {\n    return this.http.get<Country[]>(url)\n    .pipe(\n      catchError(error => of([])), // Devolver un arreglo vacío para seguir con el programa en caso de error   \n    );\n  }\n\n  searchCountryByAlphaCode(code: string): Observable<Country | null> {\n\n    const url = `${this.apiUrl}/alpha/${code}`;\n\n    return this.http.get<Country[]>(url)\n      .pipe(\n        map(countries => countries.length > 0 ? countries[0] : null),\n        catchError(error => of(null)) // Devolver un arreglo vacío para seguir con el programa en caso de error\n      );\n  }\n\n  searchCapital(term: string): Observable<Country[]> {\n    const url = `${this.apiUrl}/capital/${term}`;\n\n    return this.getCountriesRequest(url);\n  }\n\n  searchCountry(term: string): Observable<Country[]> {\n    const url = `${this.apiUrl}/name/${term}`;\n\n    return this.getCountriesRequest(url);\n  }\n\n  searchRegion(region: string): Observable<Country[]> {\n    const url = `${this.apiUrl}/region/${region}`;\n\n    return this.getCountriesRequest(url);\n  }\n  \n}"],"mappings":";AAEA,SAAqBA,UAAU,EAASC,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;AAO7D,OAAM,MAAOC,gBAAgB;EAU3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARhB,KAAAC,MAAM,GAAW,gCAAgC;IAElD,KAAAC,UAAU,GAAe;MAC9BC,SAAS,EAAE;QAACC,IAAI,EAAE,EAAE;QAAEC,SAAS,EAAE;MAAE,CAAC;MACpCC,WAAW,EAAE;QAACF,IAAI,EAAE,EAAE;QAAEC,SAAS,EAAE;MAAE,CAAC;MACtCE,QAAQ,EAAE;QAACC,MAAM,EAAE,EAAE;QAAEH,SAAS,EAAE;MAAE;KACrC;EAEuC;EAEhCI,mBAAmBA,CAACC,GAAW;IACrC,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAYD,GAAG,CAAC,CACnCE,IAAI,CACHjB,UAAU,CAACkB,KAAK,IAAIhB,EAAE,CAAC,EAAE,CAAC,CAAC,CAC5B;EACH;EAEAiB,wBAAwBA,CAACC,IAAY;IAEnC,MAAML,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,UAAUc,IAAI,EAAE;IAE1C,OAAO,IAAI,CAACf,IAAI,CAACW,GAAG,CAAYD,GAAG,CAAC,CACjCE,IAAI,CACHhB,GAAG,CAACS,SAAS,IAAIA,SAAS,CAACW,MAAM,GAAG,CAAC,GAAGX,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAC5DV,UAAU,CAACkB,KAAK,IAAIhB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/B;EACL;;EAEAoB,aAAaA,CAACb,IAAY;IACxB,MAAMM,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,YAAYG,IAAI,EAAE;IAE5C,OAAO,IAAI,CAACK,mBAAmB,CAACC,GAAG,CAAC;EACtC;EAEAQ,aAAaA,CAACd,IAAY;IACxB,MAAMM,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,SAASG,IAAI,EAAE;IAEzC,OAAO,IAAI,CAACK,mBAAmB,CAACC,GAAG,CAAC;EACtC;EAEAS,YAAYA,CAACX,MAAc;IACzB,MAAME,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,WAAWO,MAAM,EAAE;IAE7C,OAAO,IAAI,CAACC,mBAAmB,CAACC,GAAG,CAAC;EACtC;;SA9CWZ,gBAAgB;;mBAAhBA,MAAgB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAhBzB,MAAgB;EAAA0B,OAAA,EAAhB1B,MAAgB,CAAA2B,IAAA;EAAAC,UAAA,EADJ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}